<!doctype html>

<html lang="en">
<head>
  <title>FootTracker MapApp</title>

  <link rel="stylesheet" type="text/css" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />

  <link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.css" />

  <link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.Default.css" />
  <link href='https://fonts.googleapis.com/css?family=Fjalla One' rel='stylesheet'>
  
  <script type='text/javascript' src='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js'></script>

  <script type='text/javascript' src='http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/leaflet.markercluster.js'></script>
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
   google.charts.load('current', {packages: ['corechart']});     
 </script>

 <!-- Bootstrap core CSS -->
 <link href="/css/bootstrap.min.css" rel="stylesheet"> 

 <link href="/css/style.css" rel="stylesheet">
</head>

<body>
  <!-- # Menubar: Menubar on the top -->
  <nav class="navbar navbar-default navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>                        
        </button>
        <a class="navbar-brand" href="#" id="home"><span class="glyphicon glyphicon-send"></span>  FootTrackers</a>
      </div>
      <div class="collapse navbar-collapse" id="myNavbar">
        <ul class="nav navbar-nav navbar-right">
          <li><a href="#map">Map</a></li>
          <li><a href="#list">List</a></li>
          <li><a href="#rank">Ranks</a></li>
        </ul>
      </div>
    </div>
  </nav>

  <div class="container-fluid bg-2 text-center"><br/>
    <h2>Find Hot place! 
      <i class="material-icons">directions_walk</i>
      <i class="material-icons">flight</i>
      <i class="material-icons">local_dining</i>
    </h2> 
    <p>From near you, or wherever you want to travel!</p> 

    <!-- Search Bar -->
    <form id="searchID" class="navbar-form">
      <div class="input-group">
        <span>Find</span>
      </div>
      <div class="form-group">
        <input type="text" class="form-control" placeholder="restaurants, hotels, etc." id="search-input" name="search[term]">
      </div>
      <div class="input-group">
        <span>Near</span>
      </div>
      <div class="input-group">
        <input type="text" class="form-control" id="location-search" name="search[location]" placeholder="address, neighborhood, city, state, or zip" />
        <div class="input-group-btn">
          <button class="btn btn-default" type="submit" id="search-location">
            <i class="glyphicon glyphicon-search"></i>
          </button>
        </div>
      </div>
    </form>
  </div>

  <div class="container-fluid bg-1 text-left" id="map">
    <div class="col-sm-2"><br/>
      <button id="btn_current" class="btn btn-default" value="gray"><i class="material-icons">my_location</i>Current Location</button><br/>

      <div class="alert alert-info">
        <strong>Note!</strong> You need to search first!
      </div>

      <div class="list-group">
        <li class="list-group-item active">Categories</li>
        <div id="categories_info">
        </div>
      </div><br/>


      <div class="panel panel-default">
        <div class="panel-body">Stored List</div>
      </div>

      <div id="stored_list"></div><br/>
      <div id="list_fn"></div>
      
    </div>
    <div class="col-sm-10"> <!-- Right body -->
      <div id="mapid"></div>
      <div class="marker-legend" style="position:absolute; top:25px; right:50px; background-color:white; width:70px; height:95px; z-index: 100"> 
        <h6 class="legend-title">Legend<h6>
          <div class="legend-red"></div>
          <p class= "legend-content">200+ </p>
          <div class="legend-yellow"></div>
          <p class="legend-content">100+ </p>
          <div class="legend-green"></div>
          <p class="legend-content">50+ </p>
        </div>
        <h2><span class="glyphicon glyphicon-align-left" id="list"></span> Lists</h2>
        <div class="panel panel-primary">
          <div class="panel-heading">Places in area</div>
          <div class="panel-body">
            <div style='height: 20px;'></div>
            <div id="status_list" class="text-center"></div></button><div style='height: 20px;'></div>
            <table id="myTable" class="table table-hover">
              <thead><tr><th onclick="sortPlace(0)">Place</th><th onclick="sortReviews(1)">Review Count</th><th onclick="sortRating(2)">Rating</th><th onclick="sortPrice(3)">Price</th><th onclick="sortCategory(4)">Category</th><th>Click</th></tr>
              </thead>
              <tbody id="panel_info"></tbody>
            </table>
            <div id="view_more" class="text-center"></div>
          </div>
        </div>
        <h2><span class="glyphicon glyphicon-hand-right" id="rank"></span> Ranks</h2>
        <div class="panel panel-info">
          <div class="panel-heading">Ranks between places</div>
          <div class="panel-body text-center" id="charts">
            <div id="chart_review" class="col-sm-6"></div>
            <div id="chart_rating" class="col-sm-6"></div>
          </div>
        </div>
      </div> <!-- End of col-sm-10: End of right body -->
    </div>

    <div class="modal" id="modal-reviews">
      <span class="close">&times;</span>
      <div class="modal-content">
        <div id="modal-header">
          <h2>Reviews</h2>
        </div>
        <div id="modal-body">
        </div>
        <div id="modal-footer">
          <button class="btn btn-close" id="modal-close">Close</button>
        </div>
      </div>
    </div>


    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCa5u0jiFE4DNOxTMh8iTB-JHumUeZHomU&libraries=places&callback=initAutocomplete" async defer></script>

  <!-- Bootstrap core JavaScript
  ================================================== -->
  <!-- Placed at the end of the document so the pages load faster -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>

  <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>

  <script src = "/js/map.js"></script>
  <script src = "/js/leaflet-color-markers.js"></script>
  <script src="/js/bootstrap.min.js"></script>
  <!--<button type="button" value="test" id="search-reviews"> Clickerino </button>-->
  <script>
      function sortPrice() {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable");
      switching = true;
      dir = "asc"
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].cells[3];
      y = rows[i + 1].cells[3];
      //check if the two rows should switch place:
      if(dir == "asc"){
        if ((x.innerHTML).length < (y.innerHTML).length) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
      else if (dir == "desc"){
        if ((x.innerHTML).length > (y.innerHTML).length) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      switchcount++;
    }
    else{
      if(switchcount == 0 && dir == "asc"){
        dir = "desc";
        switching = true;
      }
    }
  }
}

    function sortReviews() {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable");
      switching = true;
      dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].cells[1];
      y = rows[i + 1].cells[1];
      //check if the two rows should switch place:
      if(dir == "asc"){
        if (parseInt(x.innerHTML) < parseInt(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
      else if(dir = "desc"){
        if (parseInt(x.innerHTML) > parseInt(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      switchcount++;
    }
    else{
      if(switchcount == 0 && dir == "asc"){
        dir = "desc";
        switching = true;
      }
    }
  }
}

    function sortRating() {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable");
      switching = true;
      dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].cells[2];
      y = rows[i + 1].cells[2];
      //check if the two rows should switch place:
      if(dir == "asc"){
        if (parseFloat(x.innerHTML) < parseFloat(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
      else if(dir == "desc"){
        if (parseFloat(x.innerHTML) > parseFloat(y.innerHTML)) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      switchcount++;
    }
    else{
      if(switchcount == 0 && dir == "asc"){
        dir = "desc";
        switching = true;
      }
    }
  }
}

   function sortCategory() {
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable");
      switching = true;
      dir = "asc";
  /*Make a loop that will continue until
  no switching has been done:*/
  while (switching) {
    //start by saying: no switching is done:
    switching = false;
    rows = table.getElementsByTagName("TR");
    /*Loop through all table rows (except the
    first, which contains table headers):*/
    for (i = 1; i < (rows.length - 1); i++) {
      //start by saying there should be no switching:
      shouldSwitch = false;
      /*Get the two elements you want to compare,
      one from current row and one from the next:*/
      x = rows[i].cells[4];
      y = rows[i + 1].cells[4];
      //check if the two rows should switch place:
      if(dir == "asc"){
        if (x.innerHTML > y.innerHTML) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
      else if(dir == "desc"){
        if (x.innerHTML < y.innerHTML) {
          //if so, mark as a switch and break the loop:
          shouldSwitch= true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /*If a switch has been marked, make the switch
      and mark that a switch has been done:*/
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      switchcount++;
    }
    else{
      if(switchcount == 0 && dir == "asc"){
        dir = "desc";
        switching = true; 
      }
    }
  }
}
  function sortPlace() {  
      var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
      table = document.getElementById("myTable");
      switching = true;
      dir = "asc";
      /*Make a loop that will continue until
      no switching has been done:*/
      while (switching) {
        //start by saying: no switching is done:
        switching = false;
        rows = table.getElementsByTagName("TR");
        /*Loop through all table rows (except the
        first, which contains table headers):*/
        for (i = 1; i < (rows.length - 1); i++) {
          //start by saying there should be no switching:
          shouldSwitch = false;
          /*Get the two elements you want to compare,
          one from current row and one from the next:*/
          x = rows[i].getElementsByTagName("TD")[0];
          y = rows[i + 1].getElementsByTagName("TD")[0];
          if(dir == "asc"){
          //check if the two rows should switch place:
            if(x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
              //if so, mark as a switch and break the loop:
              shouldSwitch= true;
              break;
            }
          }
          else if(dir == "desc"){
            if(x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
              //if so, mark as a switch and break the loop:
              shouldSwitch= true;
              break;
            }
          }
        }
        if (shouldSwitch) {
          /*If a switch has been marked, make the switch
          and mark that a switch has been done:*/
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
          switchcount++;
        }
        else{
          if(switchcount == 0 && dir == "asc"){
            dir = "desc";
            switching = true;
          }
        }
      }
    }


$(document).on( "click", '.list-group-item', function() {
  var textVal = $(this).text();
  console.log(textVal);
  if(textVal == "Categories") {
    console.log("category chosen");
    return;
  }
    //else
    // markers_on_map.clearLayers();
    $.post("/history",  function(data) {
      var returnedData = JSON.stringify(data.businesses);
      var transformedString = JSON.parse(returnedData);
      console.log(transformedString);
      filterMarkers(transformedString, textVal);
    });
  });
function filterMarkers(businesses, category) {
  console.log("filtering markers");
  document.getElementById("view_more").innerHTML = "";
  markers_on_map.clearLayers();

  /* Clear all arrays */
  markersArray = [];
  places = [];
      // categories = [];
      chart_reviews = [];
      chart_ratings = [];

      /* Clear all HTML elements */
      document.getElementById("panel_info").innerHTML = '';
      // document.getElementById("categories_info").innerHTML = '';

      for(var i = 0; i < businesses.length; i++) {
        var iconColor;
        var reviews = businesses[i].review_count;

        if(businesses[i].categories[0].title != category) {
          continue;
        }

        if(reviews > 200) {
          iconColor = redIcon;

        }
        else if(reviews < 100) {
          iconColor = greenIcon;

        }
        else {
          iconColor = yellowIcon;
        }

        var marker = L.marker([businesses[i].coordinates.latitude, businesses[i].coordinates.longitude], {icon: iconColor}).bindPopup(
          "<b>Place</b><br/>" + "Name: " + 
          businesses[i].name + "<br> Rating: " + businesses[i].rating + "<br>" + "<button class='btn btn-primary btn-review' onclick='openModal(" + i +")' style='width:100%'>Reviews</button>");

        places[i] = businesses[i];
        /* Show informations to info panel on the bottom */
        document.getElementById("panel_info").innerHTML += 
        "<tr id='panel_info'><td>" + places[i].name + "</td><td>" + places[i].review_count + "</td><td>" + places[i].rating + "</td><td>" + places[i].price + "</td><td>"+ places[i].categories[0].title +"</td><td><a href='#map'><button onclick='clickPlace(" + i + ")' class='btn btn-info'>View</button></a></td><td><button onclick='addPlace(" + i + ")' class='btn btn-primary'>Add</button></td></tr>";
        markers_on_map.addLayer(marker);
        markersArray.push(marker);

        /* Store categories array */
        // if(categories.indexOf(places[i].categories[0].title) < 0) {
        //   categories.push(places[i].categories[0].title);
        // }

        /* Store charts array */
        chart_reviews.push([places[i].name,places[i].review_count]);
        chart_ratings.push([places[i].name,places[i].rating]);

      }

      mymap.addLayer(markers_on_map);
      console.log(chart_reviews[0]);
      google.charts.setOnLoadCallback(drawChart);

      /* Show categories on the left */
      // for(var i = 0; i < categories.length; i++) {
      //   document.getElementById("categories_info").innerHTML += "<button class='list-group-item'>"+categories[i]+"</button>";
      // }
    }

    function searchReviews(id) {
      console.log("clicked2");
      $.post("/reviews", {businessID: id}, function(returnedReviews) {
      /*
        NOTE: The ID comes from a search result that you run from the business.
        This searchID can be found by running a search using yelp API. (Already implemented)

        It'll be labeled ID in the JSON file that's returned from the search then just run it
        through this searchReviews
        */
        var modalBody = document.getElementById("modal-body");
      //var reviewsResults = JSON.stringify(returnedReviews.reviews);
      //var modalContent2 = JSON.parse(reviewsResults);
      var reviewsResults = returnedReviews.reviews;
      modalBody.innerHTML = "";
      for (var i in reviewsResults) {
        //console.log('TEST !!!!!!' + reviewsResults[i]['text']);
        var reviewRating = JSON.stringify(reviewsResults[i]['rating']);
        var reviewText = JSON.stringify(reviewsResults[i]['text']);
        var reviewTimeCreated = JSON.stringify(reviewsResults[i]['time_created']);
        var reviewDate = reviewTimeCreated.replace(/\"/g, "");
        var reviewText2 = reviewText.replace(/\\n/g, "");

        modalBody.innerHTML += "<p style = 'padding-left: 50px; padding-right: 50px; float: right; font-weight: bold;'>Rating: " + reviewRating + "</p>" + "<p style = 'padding-left: 50px; padding-right: 30px; padding-top: 4px; font-size: 115%;'>" + reviewText2 + "</p>" + "<p style = 'padding-left: 50px; padding-right: 50px; padding-bottom: 8px; border-bottom: 1px solid #e5e7ea;'>Date Created: " + reviewDate + "</p>";
        console.log(reviewRating);
        console.log(reviewText);
        console.log(JSON.stringify(reviewsResults['user']));
      }

      //modalBody.innerHTML = reviewsResults;
      //console.log(returnedReviews.reviews);
      console.log(reviewRating);
    });
    }
  </script>
</body>

</html>